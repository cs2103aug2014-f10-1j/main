//@author: a0119401u



	/**
	 * origin: src\exception\StreamParserException.java
	 */

/**
 * Parsing exceptions, i.e unacceptable command or command syntax or command
 * arguments.
 * 
 * @version V0.5
 */
public class StreamParserException extends Exception {

	private static final long serialVersionUID = 2454506083919846547L;

	public StreamParserException() {
		super();
	}

	public StreamParserException(String message) {
		super(message);
	}

	public StreamParserException(String message, Throwable cause) {
		super(message, cause);
	}
}
	// End of segment: src\exception\StreamParserException.java





	/**
	 * origin: src\logic\StackLogic.java
	 */

	/**
	 * Add the inverse command to undo stack
	 * 
	 * @param taskIndex index of task that was modified
	 * @param currentStartTime time to be reverted to
	 */
	public void pushInverseStartCommand(int taskIndex, Calendar currentStartTime) {
		String inverseCommand = null;
		if (currentStartTime == null) {
			inverseCommand = String.format(StreamConstants.Commands.START,
					taskIndex, "null");
		} else {
			inverseCommand = String.format(StreamConstants.Commands.START,
					taskIndex, StreamUtil.getCalendarWriteUp(currentStartTime));
		}
		pushInput(inverseCommand);
	}

	// End of segment: src\logic\StackLogic.java





	/**
	 * origin: src\logic\StreamLogic.java
	 */

	/**
	 * Sorts the tasks based on the time given. First we sort by start time, and
	 * then sort by deadline.
	 * 
	 * @param descending
	 * @return 
	 */
	// Sort the task based on the time given, if start time is known, then
	// sort based on start time, if not, then sort based on deadline
	public String sortTime(final boolean descending) {
		sort(new Comparator<StreamTask>() {
			@Override
			public int compare(StreamTask o1, StreamTask o2) {
				if (o1.getStartTime() == null && o1.getDeadline() == null
						&& o2.getStartTime() == null
						&& o2.getDeadline() == null) {
					return 0;
				} else if (o1.getStartTime() == null
						&& o1.getDeadline() == null) {
					return 1;
				} else if (o2.getStartTime() == null
						&& o2.getDeadline() == null) {
					return -1;
				} else if (o1.getStartTime() == null
						&& o2.getStartTime() == null) {
					return descending ? o2.getDeadline().compareTo(
							o1.getDeadline()) : o1.getDeadline().compareTo(
							o2.getDeadline());
				} else if (o1.getStartTime() == null) {
					return descending ? o2.getStartTime().compareTo(
							o1.getDeadline()) : o1.getDeadline().compareTo(
							o2.getStartTime());
				} else if (o2.getStartTime() == null) {
					return descending ? o2.getDeadline().compareTo(
							o1.getStartTime()) : o1.getStartTime().compareTo(
							o2.getDeadline());
				} else {
					return descending ? o2.getStartTime().compareTo(
							o1.getStartTime()) : o1.getStartTime().compareTo(
							o2.getStartTime());
				}
			}
		});
		return "Sort by time " + (descending ? "descending." : "ascending.");
	}

	// End of segment: src\logic\StreamLogic.java





	/**
	 * origin: src\logic\TaskLogic.java
	 */

	/**
	 * Sets the start time of a task to the task object
	 * 
	 * @param task
	 * @param calendar
	 * @return result - the string consisting of the final start time assigned to the task.
	 */
	public String setStartTime(StreamTask task, Calendar calendar) {
		String result = null;
		String parsedCalendar = null;
		if (calendar == null) {
			task.setStartTime(null);
			result = String.format(
					StreamConstants.LogMessage.START_NOT_SPECIFIED,
					task.getTaskName());
		} else {
			task.setStartTime(calendar);
			parsedCalendar = StreamUtil.getCalendarWriteUp(calendar);
			result = String.format(StreamConstants.LogMessage.START,
					task.getTaskName(), parsedCalendar);
		}
		logDebug(String.format(StreamConstants.LogMessage.SET_STARTTIME,
				task.getTaskName(), parsedCalendar));
		return result;
	}

	private void rank(StreamTask task, String contents) {
		String inputRank = contents.trim();
		RankType parsedRankType = StreamParser.parseRanking(inputRank);
		switch (parsedRankType) {
			case HI:
			case MED:
			case LO:
				String translatedRank = StreamParser
						.translateRanking(parsedRankType);
				task.setRank(translatedRank);
			default:
		}
	}

	// End of segment: src\logic\TaskLogic.java





	/**
	 * origin: src\model\StreamTask.java
	 */

	/**
	 * Gets the deadline of a task
	 * 
	 * @return this.deadline - the deadline of the task
	 */
	public Calendar getDeadline() {
		return this.deadline;
	}

	/**
	 * Sets the deadline of a task
	 * 
	 * @param deadline - the new deadline of the task
	 */
	public void setDeadline(Calendar deadline) {
		this.deadline = deadline;
	}

	/**
	 * Gets the tags of a task as an ArrayList of strings
	 * 
	 * @return tags - the tags of the task
	 */
	public ArrayList<String> getTags() {
		return tags;
	}

	/**
	 * Gets the rank of a task
	 * 
	 * @return this.rank - The rank of the task
	 */
	public String getRank() {
		return this.rank;
	}

	/**
	 * Sets the rank of a task
	 * 
	 * @param newRank - the new rank of the task
	 */
	public void setRank(String newRank) {
		this.rank = newRank;
	}

	/**
	 * Checks whether a given task is done
	 * 
	 * @return true if done, false otherwise
	 */
	public boolean isDone() {
		return this.isDone;
	}

	/**
	 * Marks a task as done
	 * 
	 */
	public void markAsDone() {
		setDone(true);
	}

	/**
	 * Marks a task as ongoing
	 * 
	 */
	public void markAsOngoing() {
		setDone(false);
	}

	// End of segment: src\model\StreamTask.java





	/**
	 * origin: src\parser\StreamParser.java
	 */

/**
 * Parser is used to interpret the user input to a pack of information and later
 * on pass it to the Logic part
 * 
 * @version V0.5
 */
public class StreamParser {

	public enum CommandType {
		INIT, ADD, DEL, DESC, DUE, START, VIEW, RANK, MODIFY, NAME, MARK,
		TAG, UNTAG, SEARCH, SORT, UNSORT, FILTER, CLRSRC, CLEAR, UNDO, EXIT,
		ERROR, RECOVER, DISMISS, FIRST, PREV, NEXT, LAST, PAGE, HELP;
	}

	public enum MarkType {
		DONE, NOT, OVERDUE, INACTIVE, NULL;
	}

	public enum RankType {
		HI, MED, LO, NULL;
	}

	public enum SortType {
		ALPHA, START, END, TIME, IMPORTANCE, NULL;
	}

	public enum FilterType {
		DONE, NOT, HIRANK, MEDRANK, LORANK, DUEON, DUEBEF,
		DUEAFT, STARTON, STARTBEF, STARTAFT, NOTIMING,
		DEADLINED, EVENT, NULL, OVERDUE, INACTIVE;
	}

	private CommandType commandKey;
	private Integer commandIndex;
	private String commandContent;

	private static final StreamLogger logger = StreamLogger
			.init(StreamConstants.ComponentTag.STREAMPARSER);

	static final String ERROR_INCOMPLETE_INPUT = "Please provide more information!";
	static final String ERROR_INCOMPLETE_INDEX = "Please provide the index or page number!";
	static final String ERROR_INVALID_INDEX = "Please provide a valid index number!";
	static final String ERROR_INVALID_FILTER = "Please enter a valid filter type!";
	static final String ERROR_INVALID_SORT = "Please enter a valid sorting type!";
	static final String ERROR_INVALID_MARK = "Please enter a valid marking type!";
	static final String ERROR_INVALID_RANK = "Please enter a valid input rank!";
	public static final String ERROR_EMPTY_INPUT = "Empty input detected!";
	static final String ERROR_INDEX_OUT_OF_BOUNDS = "The index you entered is out of range!";
	static final String ERROR_DATE_NOT_PARSEABLE = "Date cannot be understood!";
	static final String ERROR_UNKNOWN_COMMAND = "Unknown command type!";

	private static final int PARAM_POS_KEYWORD = 0;
	private static final int PARAM_POS_CONTENTS = 1;
	private static final int PARAM_POS_INDEX = 1;
	private static final int PARAM_POS_ARGS = 2;
	private static final int PARAM_POS_FILTERTYPE = 1;
	private static final int PARAM_POS_SORTTYPE = 1;
	private static final int PARAM_POS_SORTORDER = 2;

	private static final int ARGS_LENGTH_TYPE_ONE = 2;
	private static final int ARGS_LENGTH_TYPE_TWO = 2;
	private static final int ARGS_LENGTH_TYPE_THREE = 3;
	private static final int ARGS_LENGTH_TYPE_FOUR = 3;

	public StreamParser() {
		this.commandKey = CommandType.INIT;
		this.commandIndex = null;
		this.commandContent = null;
	}

	public void interpretCommand(String input, int numOfTasks)
			throws StreamParserException {
		if (input.isEmpty()) {
			throw new StreamParserException(ERROR_EMPTY_INPUT);
		}
		String[] contents = input.trim().split(" ", 2);
		String[] contentsSplitWithIndex = input.trim().split(" ", 3);
		String key = contents[PARAM_POS_KEYWORD].toLowerCase();
		switch (key) {
			case "add":
				checkTypeOneValidity(contents);
				this.commandKey = CommandType.ADD;
				break;

			case "del":
			case "delete":
				checkTypeTwoValidity(contents, numOfTasks);
				this.commandKey = CommandType.DEL;
				break;

			case "desc":
			case "describe":
				checkTypeThreeValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.DESC;
				break;

			case "due":
			case "end":
				checkTypeFourValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.DUE;
				break;

			case "start":
				checkTypeFourValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.START;
				break;

			case "view":
				checkTypeTwoValidity(contents, numOfTasks);
				this.commandKey = CommandType.VIEW;
				break;

			case "rank":
				checkRankValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.RANK;
				break;

			case "mod":
			case "modify":
				checkTypeThreeValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.MODIFY;
				break;

			case "name":
				checkTypeThreeValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.NAME;
				break;

			case "mark":
				checkMarkValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.MARK;
				break;

			case "tag":
				checkTypeThreeValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.TAG;
				break;

			case "untag":
				checkTypeThreeValidity(contentsSplitWithIndex, numOfTasks);
				this.commandKey = CommandType.UNTAG;
				break;

			case "search":
			case "find":
				checkTypeOneValidity(contents);
				this.commandKey = CommandType.SEARCH;
				break;

			case "sort":
				checkSortValidity(contents, contentsSplitWithIndex);
				this.commandKey = CommandType.SORT;
				break;

			case "unsort":
				this.commandKey = CommandType.UNSORT;
				break;

			case "filter":
				checkFilterValidity(contents);
				this.commandKey = CommandType.FILTER;
				break;

			case "clrsrc":
				this.commandKey = CommandType.CLRSRC;
				break;

			case "clear":
			case "clr":
				this.commandKey = CommandType.CLEAR;
				break;

			case "undo":
				this.commandKey = CommandType.UNDO;
				break;

			case "recover":
				this.commandKey = CommandType.RECOVER;
				this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
				break;

			case "dismiss":
				this.commandKey = CommandType.DISMISS;
				this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
				break;

			case "exit":
				this.commandKey = CommandType.EXIT;
				break;

			case "first":
				this.commandKey = CommandType.FIRST;
				break;

			case "prev":
			case "previous":
				this.commandKey = CommandType.PREV;
				break;

			case "next":
				this.commandKey = CommandType.NEXT;
				break;

			case "last":
				this.commandKey = CommandType.LAST;
				break;

			case "page":
			case "goto":
				checkTypeTwoValidity(contents, 1 + numOfTasks
						/ StreamConstants.UI.MAX_VIEWABLE_TASK);
				this.commandKey = CommandType.PAGE;
				break;

			case "help":
				this.commandKey = CommandType.HELP;
				break;

			default:
				logger.log(LogLevel.DEBUG, "Input cannot be interpreted.");
				throw new StreamParserException(ERROR_UNKNOWN_COMMAND);

		}
		logCommand(contents, contentsSplitWithIndex);
	}

	private void checkIndexValidity(String[] contents, int numOfTasks)
			throws StreamParserException {
		if (!StreamUtil.isInteger(contents[PARAM_POS_INDEX])) {
			throw new StreamParserException(ERROR_INVALID_INDEX);
		} else if (!StreamUtil.isWithinRange(
				Integer.parseInt(contents[PARAM_POS_INDEX]), numOfTasks)) {
			throw new StreamParserException(ERROR_INDEX_OUT_OF_BOUNDS);
		}
	}

	/*
	 * Type one command: commands with format (CommandWord) (String arguments of
	 * any length)
	 */
	private void checkTypeOneValidity(String[] contents)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_ONE) {
			throw new StreamParserException(ERROR_INCOMPLETE_INPUT);
		}
		this.commandContent = contents[PARAM_POS_CONTENTS];
	}

	/*
	 * Type two command: commands with format (CommandWord) (index number)
	 */
	private void checkTypeTwoValidity(String[] contents, int numOfTasks)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_TWO) {
			throw new StreamParserException(ERROR_INCOMPLETE_INDEX);
		} else {
			checkIndexValidity(contents, numOfTasks);
			this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
		}
	}

	/*
	 * Type three command: commands with format (CommandWord) (index number)
	 * (String arguments of any length)
	 */
	private void checkTypeThreeValidity(String[] contents, int numOfTasks)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_THREE) {
			throw new StreamParserException(ERROR_INCOMPLETE_INPUT);
		} else {
			checkIndexValidity(contents, numOfTasks);
			this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
			this.commandContent = contents[PARAM_POS_ARGS];
		}
	}

	/*
	 * Type four command: commands with format (CommandWord) (index number)
	 * (date String to be parsed)
	 */
	private void checkTypeFourValidity(String[] contents, int numOfTasks)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_FOUR) {
			throw new StreamParserException(ERROR_INCOMPLETE_INPUT);
		} else {
			checkIndexValidity(contents, numOfTasks);
			if (!StreamUtil.isParseableDate(contents[PARAM_POS_ARGS])) {
				throw new StreamParserException(ERROR_DATE_NOT_PARSEABLE);
			}
			this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
			this.commandContent = contents[PARAM_POS_ARGS];
		}
	}

	private void checkRankValidity(String[] contents, int numOfTasks)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_THREE) {
			throw new StreamParserException(ERROR_INCOMPLETE_INPUT);
		} else {
			checkIndexValidity(contents, numOfTasks);
			if (!checkRanking(contents[PARAM_POS_ARGS])) {
				throw new StreamParserException(ERROR_INVALID_RANK);
			}
			this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
			this.commandContent = contents[PARAM_POS_ARGS];
		}
	}

	private void checkMarkValidity(String[] contents, int numOfTasks)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_THREE) {
			throw new StreamParserException(ERROR_INCOMPLETE_INPUT);
		} else {
			checkIndexValidity(contents, numOfTasks);
			if (!checkMarking(contents[PARAM_POS_ARGS])) {
				throw new StreamParserException(ERROR_INVALID_MARK);
			}
			this.commandIndex = Integer.parseInt(contents[PARAM_POS_INDEX]);
			this.commandContent = contents[PARAM_POS_ARGS];
		}
	}

	private void checkFilterValidity(String[] contents)
			throws StreamParserException {
		if (contents.length < ARGS_LENGTH_TYPE_ONE) {
			throw new StreamParserException(ERROR_INCOMPLETE_INPUT);
		} else if (!checkFilter(contents[PARAM_POS_FILTERTYPE].trim())) {
			throw new StreamParserException(ERROR_INVALID_FILTER);
		}
		this.commandContent = contents[PARAM_POS_CONTENTS];
	}

	private void logCommand(String[] contents, String[] contentsWithIndex) {
		String commandKey = contents[PARAM_POS_KEYWORD].toUpperCase();
		if (contentsWithIndex.length >= 3
				&& StreamUtil.isInteger(contentsWithIndex[PARAM_POS_INDEX])) {
			logger.log(LogLevel.DEBUG, "Command received: " + commandKey
					+ ". Index number " + contentsWithIndex[PARAM_POS_INDEX]
					+ ". Arguments: " + contentsWithIndex[PARAM_POS_ARGS]);
		} else if (contents.length == 2) {
			logger.log(LogLevel.DEBUG, "Command received: " + commandKey
					+ ". Arguments: " + contents[PARAM_POS_CONTENTS]);
		} else {
			logger.log(LogLevel.DEBUG, "Command received: " + commandKey
					+ ". No arguments supplied.");
		}
	}

	/**
	 * @return <b>CommandType</b> - the parsed command type
	 */
	public CommandType getCommandType() {
		return this.commandKey;
	}

	/**
	 * @return <b>Integer</b> - the parsed index number, if applicable
	 */
	public Integer getCommandIndex() {
		return this.commandIndex;
	}

	/**
	 * @return <b>Integer</b> - the parsed arguments/contents, if applicable
	 */
	public String getCommandContent() {
		return this.commandContent;
	}

	// End of segment: src\parser\StreamParser.java





	/**
	 * origin: src\parser\StreamParserTest.java
	 */


//Note: for test not focusing on the range problem (number of tasks type)
//remember to set the second param of interpretCommand as a reasonable positive integer

public class StreamParserTest {

	StreamParser stparser;
	
	@Before
	public void setUp() throws Exception {
		stparser = new StreamParser();
	}

	@Test
	public void parserAddTest() {
		
		try{
			
			stparser.interpretCommand("add ", 0);
			fail();
			
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INCOMPLETE_INPUT;
			assertEquals(expectedMessage, e.getMessage());
		}
			
	}
	
	@Test
	public void parserDescTest() {
		
		try{
			stparser.interpretCommand("desc -1 ok", 1);
			fail();
		}catch (Exception e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_INDEX;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			stparser.interpretCommand("desc newcq ok", 3);
			fail();
		}catch (Exception e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_INDEX;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			stparser.interpretCommand("desc 50 ok", 45);
			fail();
		}catch (Exception e) {
			final String expectedMessage = StreamParser.ERROR_INDEX_OUT_OF_BOUNDS;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			stparser.interpretCommand("desc 1", 2);
			fail();
		}catch (Exception e) {
			final String expectedMessage = StreamParser.ERROR_INCOMPLETE_INPUT;
			assertEquals(expectedMessage, e.getMessage());
		}
			
	}
	
	@Test
	public void parserDelTest() {
		
		try{
			
			stparser.interpretCommand("del ", 1);
			fail();
			
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INCOMPLETE_INDEX;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			
			stparser.interpretCommand("del as", 5);
			fail();
			
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_INDEX;
			assertEquals(expectedMessage, e.getMessage());
		}
			
	}
	
	@Test
	public void parserMarkTest() {
		
		try{
			
			stparser.interpretCommand("done tutorial", 3);
			fail();
			
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_UNKNOWN_COMMAND;
			System.out.println(expectedMessage);
			System.out.println(e.getMessage());
			assertEquals(expectedMessage, e.getMessage());
		}
			
	}
	
	@Test
	public void parserRankTest() {
		
		try{
			
			stparser.interpretCommand("rank as high", 5);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_INDEX;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		//This test and the following one demonstrate the ranking type and 
		//the boundary: you cannot modify a task whose index is not real
		try{
			
			stparser.interpretCommand("rank 1 small", 1);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_RANK;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			stparser.interpretCommand("rank 1 high",0);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INDEX_OUT_OF_BOUNDS;
			assertEquals(expectedMessage, e.getMessage());
		}
	}
	
	@Test
	public void parserTagTest() {
		
		try{
			stparser.interpretCommand("tag 1", 3);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INCOMPLETE_INPUT;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			stparser.interpretCommand("tag 80 home", 78);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INDEX_OUT_OF_BOUNDS;
			assertEquals(expectedMessage, e.getMessage());
		}
	}
	
	@Test
	public void parserFilterTest() {
		
		try{
			stparser.interpretCommand("filter", 5);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INCOMPLETE_INPUT;
			assertEquals(expectedMessage, e.getMessage());
		}
		
		try{
			stparser.interpretCommand("filter rank no", 3);
			fail();
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_FILTER;
			assertEquals(expectedMessage, e.getMessage());
		}
	}
	
	@Test
	public void parserSortTest() {
		
		try{
			stparser.interpretCommand("sort command", 3);
		}catch (StreamParserException e) {
			final String expectedMessage = StreamParser.ERROR_INVALID_SORT;
			assertEquals(expectedMessage, e.getMessage());
		}
	}
	

}

	// End of segment: src\parser\StreamParserTest.java





	/**
	 * origin: src\stream\Stream.java
	 */

	/**
	 * Adds a rank to a task.
	 * <p>
	 * Pre-condition: <i>task, index, description</i> not null
	 * </p>
	 * 
	 * @throws StreamModificationException
	 * @return <strong>String</strong> - the log message
	 */
	private void executeRank(Integer taskIndex, String taskRank)
			throws StreamModificationException {
		String taskName = streamLogic.getTaskNumber(taskIndex);
		taskRank = StreamParser.translateRanking(StreamParser
				.parseRanking(taskRank));
		StreamTask currentTask = streamLogic.getTask(taskName);
		String oldRank = currentTask.getRank();
		currentTask.setRank(taskRank);
		stui.setActiveTask(currentTask);

		stackLogic.pushInverseSetRankingCommand(taskIndex, oldRank);
		String result = String.format(StreamConstants.LogMessage.RANK,
				currentTask.getTaskName(), taskRank);
		showAndLogResult(result);
	}

	// End of segment: src\stream\Stream.java





	/**
	 * origin: src\stream\Stream.java
	 */

	/**
	 * Set the due date of the selected task
	 * 
	 * @throws StreamModificationException
	 */
	private String setDueDate(String taskName, int taskIndex,
			Calendar newDeadline) throws StreamModificationException {
		StreamTask task = streamLogic.getTask(taskName);
		Calendar deadline = task.getDeadline();
		Calendar startTime = task.getStartTime();
		return processDueDate(taskIndex, newDeadline, task, deadline, startTime);

	}

	private String processDueDate(int taskIndex, Calendar newDeadline,
			StreamTask task, Calendar deadline, Calendar startTime) {
		if (StreamUtil.isValidDeadline(newDeadline, startTime)) {
			stackLogic.pushInverseDueCommand(taskIndex, deadline);
			// This section is contributed by A0093874N
			return taskLogic.setDeadline(task, newDeadline);
			//
		} else {
			return StreamConstants.ExceptionMessage.ERR_DEADLINE_BEFORE_STARTTIME;
		}
	}

	/**
	 * Set the start date of the selected task
	 * 
	 * @throws StreamModificationException
	 */
	private String setStartDate(String taskName, int taskIndex,
			Calendar newStartTime) throws StreamModificationException {
		StreamTask currentTask = streamLogic.getTask(taskName);
		Calendar currentStartTime = currentTask.getStartTime();
		Calendar deadline = currentTask.getDeadline();
		return processStartTime(taskIndex, newStartTime, currentTask,
				currentStartTime, deadline);
	}

	private String processStartTime(int taskIndex, Calendar newStartTime,
			StreamTask currentTask, Calendar currentStartTime, Calendar deadline) {
		if (StreamUtil.isValidStartTime(deadline, newStartTime)) {
			stackLogic.pushInverseStartCommand(taskIndex, currentStartTime);
			return taskLogic.setStartTime(currentTask, newStartTime);
		} else {
			return StreamConstants.ExceptionMessage.ERR_STARTTIME_AFTER_DEADLINE;
		}
	}

	/**
	 * Mark the selected task as done
	 * 
	 * @return <strong>String</strong> - the log message
	 */
	private String markAsDone(StreamTask task, int index) {
		boolean wasDone = task.isDone();
		task.markAsDone();

		stackLogic.pushInverseSetDoneCommand(wasDone, index);
		// This section is contributed by A0093874N
		return String.format(StreamConstants.LogMessage.MARK,
				task.getTaskName(), "done");
		//
	}

	// End of segment: src\stream\Stream.java





	/**
	 * origin: src\util\StreamUtil.java
	 */


	/**
	 * A utility function to check whether <i>str</i> can be parsed as an
	 * <b>Integer></b>.
	 * 
	 * @param str
	 *            - the String to be parsed
	 */
	public static boolean isInteger(String str) {
		int size = str.length();
		for (int i = 0; i < size; i++) {
			if (!Character.isDigit(str.charAt(i))) {
				return false;
			}
		}
		return size > 0;
	}

	/**
	 * 
	 * A utility function to check whether the given index is within the range
	 * of the whole list of tasks
	 * 
	 * @param index
	 * @param numOfTasks
	 * @return <b>boolean</b> - indicates whether it's within the range or not
	 */

	public static boolean isWithinRange(int index, int numOfTasks) {
		return index >= 1 && index <= numOfTasks;
	}

	// End of segment: src\util\StreamUtil.java





